import React, { useEffect } from 'react'
import { Select, Row, Col, Radio, Typography } from "antd";
import { FaLinux, FaWindows } from "react-icons/fa";
import data from '@assets/data/Windows/AD/Enumeration.ad.json';
import { useStore } from './store';

const { Option, OptGroup } = Select;
const { Paragraph, Text } = Typography;

const index = () => {
  const { operatingSystemMode, taskList, selectedTaskCommand, setOperatingSystemMode, setTaskList, setSelectedTaskCommand } = useStore();

  useEffect(() => {
    setTaskList(data);
    const initialCommand = data[0]?.commands[0];
    setSelectedTaskCommand(initialCommand);
  }, []);

  const handleOperatingSystemChange = (evt) => {
    const newOperatingSystemMode = evt.target.value;
    setOperatingSystemMode(newOperatingSystemMode);
  };

  const handleCommandChange = (value) => {
    const newSelectedCommand = taskList.find(task => task.commands.some(command => command.id === value)).commands.find(command => command.id === value);
    setSelectedTaskCommand(newSelectedCommand);
  };

  const selectedTaskCommandDescription = selectedTaskCommand ? selectedTaskCommand[operatingSystemMode + '_description'] : '';


  return (
    <>
      <Row gutter={[16, 16]}>
        <Col span={8}>
          <Radio.Group defaultValue={operatingSystemMode} buttonStyle="solid" onChange={handleOperatingSystemChange}>
            <Radio.Button value="windows"><FaWindows /> Windows</Radio.Button>
            <Radio.Button value="linux"><FaLinux /> Linux</Radio.Button>
          </Radio.Group>
        </Col>
        <Col span={16} >
          <Select
            showSearch
            style={{ width: "100%" }}
            placeholder="Steps"
            optionFilterProp="children"
            onChange={handleCommandChange}
            defaultValue={selectedTaskCommand?.id}
            value={selectedTaskCommand?.id}
            filterOption={(input, option) =>
              typeof option.children === 'string' && (option.children as string).toLowerCase().indexOf(input.toLowerCase()) >= 0
            }
          >
            {taskList.map((task) => {
              return (
                <OptGroup label={task.topic} key={task.id}>
                  {task.commands.map((command) => (
                    <Option key={command.id} value={command.id}>
                      {command.title}
                    </Option>
                  ))}
                </OptGroup>
              );
            })}

          </Select>
        </Col>

        {selectedTaskCommand &&
          <Col>
            <Paragraph>{selectedTaskCommand.description}</Paragraph>
            <Paragraph>{selectedTaskCommandDescription}</Paragraph>
            {selectedTaskCommand[operatingSystemMode].split(';').map((command, index) => (
              <div key={index}>
                <Paragraph>
                  <pre>
                    <Text copyable editable code>{command}</Text>
                  </pre>
                </Paragraph>
              </div>
            ))}
          </Col>
        }
      </Row>
    </>
  )
}

export default index