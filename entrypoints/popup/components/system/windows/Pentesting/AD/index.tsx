import { PlusCircleOutlined } from '@ant-design/icons';
import networkEnumerationData from "@assets/data/Windows/AD/01_enumeration.network.ad.json";
import unauthenticatedEnumerationData from "@assets/data/Windows/AD/02_enumeration.unauthenticated.ad.json";
import authenticatedEnumerationData from "@assets/data/Windows/AD/03_enumeration.authenticated.ad.json";
import passwordSpraying from "@assets/data/Windows/AD/04_password_spraying.ad.json";
import serviceTicketAttack from "@assets/data/Windows/AD/05_kerberoasting.ad.json";
import { Button, Col, Form, Radio, Row, Select, Typography } from 'antd';
import { useEffect } from 'react';
import { FaLinux, FaWindows } from "react-icons/fa";
import MultiModal from './MultiModal';
import { useStore } from './store';



const index = () => {
  const { Option, OptGroup } = Select;
  const { Paragraph, Text } = Typography;
  const [form] = Form.useForm();


  const { operatingSystemMode, taskList, selectedTaskCommand, setOperatingSystemMode, setTaskList, setSelectedTaskCommand, setIsModalVisible } = useStore();

  const showModal = () => {
    setIsModalVisible(true);
  };

  const { metavariables, setMetavariables } = useStore();

  useEffect(() => {
    const aggregatedData = [networkEnumerationData, unauthenticatedEnumerationData, authenticatedEnumerationData, passwordSpraying, serviceTicketAttack];
    setTaskList(aggregatedData);
    const initialCommand = aggregatedData[0]?.commands[0];
    setSelectedTaskCommand(initialCommand);
  }, []);

  const handleOperatingSystemChange = (evt) => {
    const newOperatingSystemMode = evt.target.value;
    setOperatingSystemMode(newOperatingSystemMode);
  };

  const handleCommandChange = (value) => {
    const newSelectedCommand = taskList.find(task => task.commands && task.commands.some(command => command.commandId === value)).commands.find(command => command.commandId === value);
    setSelectedTaskCommand(newSelectedCommand);
  };

  return (
    <>
  <Button type="primary" shape="circle" icon={<PlusCircleOutlined />} size="large" onClick={showModal} style={{ position: 'fixed', right: '20px', bottom: '20px' }} />      <MultiModal />
      <Row gutter={[16, 16]}>
        <Col span={8}>
          <Radio.Group defaultValue={operatingSystemMode} buttonStyle="solid" onChange={handleOperatingSystemChange}>
            <Radio.Button value="windows"><FaWindows /> Windows</Radio.Button>
            <Radio.Button value="linux"><FaLinux /> Linux</Radio.Button>
          </Radio.Group>
        </Col>
        <Col span={16} >
          <Select
            showSearch
            style={{ width: "100%" }}
            placeholder="Steps"
            optionFilterProp="children"
            onChange={handleCommandChange}
            defaultValue={selectedTaskCommand?.commandId}
            value={selectedTaskCommand?.commandId}
            filterOption={(input, option) =>
              typeof option.children === 'string' && (option.children as string).toLowerCase().indexOf(input.toLowerCase()) >= 0
            }
          >
            {taskList.map((task) => (
              <OptGroup label={task.topicTitle} key={task.topicId}>
                {task.commands?.map((command) => (
                  <Option key={command.commandId} value={command.commandId}>
                    {command.commandTitle}
                  </Option>
                ))}
              </OptGroup>
            ))}
          </Select>
        </Col>
        {selectedTaskCommand &&
          <Col>
            <Paragraph>{selectedTaskCommand.commandDescription}</Paragraph>
            {selectedTaskCommand[operatingSystemMode + 'Commands'].map((commandGroup, index) => (
              <div key={index}>
                <Paragraph>{commandGroup.commandGroupDescription}</Paragraph>
                {commandGroup.commandList.map((command, commandIndex) => {
                  // Replace metavariables in the command with their values
                  const commandWithValues = command.replace(/{(.*?)}/g, (_, key) => metavariables[key] || `{${key}}`);
                  return (
                    <Paragraph key={commandIndex}>
                      <pre>
                        <Text copyable editable code>{commandWithValues}</Text>
                      </pre>
                    </Paragraph>
                  );
                })}
              </div>
            ))}
          </Col>
        }
      </Row>
    </>
  );
}

export default index