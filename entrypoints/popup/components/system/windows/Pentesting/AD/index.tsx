import React, { useEffect, useState } from 'react'
import { Modal, Input, Button, Row, Col, Radio, Typography, Select, Form, Divider } from 'antd';
import { PlusCircleOutlined } from '@ant-design/icons';
import { FaLinux, FaWindows ,FaHashtag, FaKey, FaTicketAlt, FaCertificate , FaCheckCircle } from "react-icons/fa";
import { UserOutlined, DesktopOutlined, KeyOutlined } from '@ant-design/icons';
import { useStore } from './store';
import networkEnumerationData from "@assets/data/Windows/AD/00_enumeration.network.ad.json";
import unauthenticatedEnumerationData from "@assets/data/Windows/AD/01_enumeration.unauthenticated.ad.json";
import authenticatedEnumerationData from "@assets/data/Windows/AD/02_enumeration.authenticated.ad.json";





const index = () => {
  const { Option, OptGroup } = Select;
  const { Paragraph, Text } = Typography;
  const [form] = Form.useForm();


  const { operatingSystemMode, taskList, selectedTaskCommand, setOperatingSystemMode, setTaskList, setSelectedTaskCommand, addPrincipal, selectPrincipal, selectedPrincipal, principals, credentialType, setCredentialType } = useStore();
  const handleAddPrincipal = () => {
    form.validateFields().then((values) => {
      addPrincipal(values);
      form.resetFields();
    });
  };

  const [isModalVisible, setIsModalVisible] = useState(false);
  const showModal = () => {
    setIsModalVisible(true);
  };

  const handleOk = () => {
    setIsModalVisible(false);
  };

  const handleCancel = () => {
    setIsModalVisible(false);
  };

  const handleInputChange = (e) => {
    const trimmedValue = e.target.value.trim();
    setMetavariables({ [e.target.name]: trimmedValue === "" ? "" : trimmedValue });
  };

  const handleCredentialTypeChange = (e) => {
    setCredentialType(String(e.target.value));
  };


  const { metavariables, setMetavariables } = useStore();

  useEffect(() => {
    const aggregatedData = [networkEnumerationData, unauthenticatedEnumerationData, authenticatedEnumerationData];
    setTaskList(aggregatedData);
    const initialCommand = aggregatedData[0]?.commands[0];
    setSelectedTaskCommand(initialCommand);
  }, []);

  const handleOperatingSystemChange = (evt) => {
    const newOperatingSystemMode = evt.target.value;
    setOperatingSystemMode(newOperatingSystemMode);
  };

  const handleCommandChange = (value) => {
    const newSelectedCommand = taskList.find(task => task.commands && task.commands.some(command => command.commandId === value)).commands.find(command => command.commandId === value);
    setSelectedTaskCommand(newSelectedCommand);
  };

  return (
    <>
      <Button type="primary" shape="circle" icon={<PlusCircleOutlined />} size="large" onClick={showModal} style={{ position: 'fixed', right: '20px', bottom: '20px' }} />


      <Modal title="Set Metavariables" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel} width={720}>
        <Row gutter={16}>
          <Col span={8}>
            <Input name="INTERFACE" placeholder="INTERFACE" value={metavariables.INTERFACE} onChange={handleInputChange} />
          </Col>
          <Col span={8}>
            <Input name="DC_IP" placeholder="DC_IP" value={metavariables.DC_IP} onChange={handleInputChange} />
          </Col>
          <Col span={8}>
            <Input name="DOMAIN" placeholder="DOMAIN" value={metavariables.DOMAIN} onChange={handleInputChange} />
          </Col>
        </Row>

        <Divider />

        <Form form={form} layout="vertical" onFinish={handleAddPrincipal}>
          <Form.Item name="name" rules={[{ required: true, message: 'Please input the principal name!' }]}>
            <Input placeholder="JohnDoe" />
          </Form.Item>
          <Form.Item name="credentialType">
            <Radio.Group onChange={handleCredentialTypeChange}>
              <Radio.Button value="nthash"><FaHashtag /> NT HASH</Radio.Button>
              <Radio.Button value="password"><FaKey /> Password</Radio.Button>
              <Radio.Button value="tgt"><FaTicketAlt /> TGT</Radio.Button>
              <Radio.Button value="st"><FaTicketAlt /> ST</Radio.Button>
              <Radio.Button value="certificate"><FaCertificate /> Certificate</Radio.Button>
            </Radio.Group>
          </Form.Item>
          {credentialType && (
            <Form.Item name="credentialValue" rules={[{ required: true, message: 'Please input the credential value!' }]}>
              <Input.TextArea placeholder={credentialType.toUpperCase()} style={{ width: '100%', height: '100px' }} />
            </Form.Item>
          )}
          <Form.Item>
            <Button type="primary" htmlType="submit">Add Principal</Button>
          </Form.Item>
        </Form>

        <Divider />

        <Select
          style={{ width: '100%' }}
          showSearch
          value={selectedPrincipal?.name}
          onChange={(name) => selectPrincipal(principals.find((p) => p.name === name))}
        >
          {principals.map((principal) => (
            <Option value={principal.name} key={principal.name}>
              {principal.name.endsWith('$') && <DesktopOutlined />}
              {!principal.name.endsWith('$') && <UserOutlined />}
              {principal.name}
              {principal.credentialType === 'nthash' && <FaHashtag />}
              {principal.credentialType === 'password' && <FaKey />}
              {(principal.credentialType === 'tgt' || principal.credentialType === 'st') && <FaTicketAlt />}
              {principal.credentialType === 'certificate' && <FaCertificate />}
            </Option>
          ))}
        </Select>
      </Modal>

      <Row gutter={[16, 16]}>
        <Col span={8}>
          <Radio.Group defaultValue={operatingSystemMode} buttonStyle="solid" onChange={handleOperatingSystemChange}>
            <Radio.Button value="windows"><FaWindows /> Windows</Radio.Button>
            <Radio.Button value="linux"><FaLinux /> Linux</Radio.Button>
          </Radio.Group>
        </Col>
        <Col span={16} >
          <Select
            showSearch
            style={{ width: "100%" }}
            placeholder="Steps"
            optionFilterProp="children"
            onChange={handleCommandChange}
            defaultValue={selectedTaskCommand?.commandId}
            value={selectedTaskCommand?.commandId}
            filterOption={(input, option) =>
              typeof option.children === 'string' && (option.children as string).toLowerCase().indexOf(input.toLowerCase()) >= 0
            }
          >
            {taskList.map((task) => (
              <OptGroup label={task.topicTitle} key={task.topicId}>
                {task.commands?.map((command) => (
                  <Option key={command.commandId} value={command.commandId}>
                    {command.commandTitle}
                  </Option>
                ))}
              </OptGroup>
            ))}
          </Select>
        </Col>
        {selectedTaskCommand &&
          <Col>
            <Paragraph>{selectedTaskCommand.commandDescription}</Paragraph>
            {selectedTaskCommand[operatingSystemMode + 'Commands'].map((commandGroup, index) => (
              <div key={index}>
                <Paragraph>{commandGroup.commandGroupDescription}</Paragraph>
                {commandGroup.commandList.map((command, commandIndex) => {
                  // Replace metavariables in the command with their values
                  const commandWithValues = command.replace(/{(.*?)}/g, (_, key) => metavariables[key] || `{${key}}`);
                  return (
                    <Paragraph key={commandIndex}>
                      <pre>
                        <Text copyable editable code>{commandWithValues}</Text>
                      </pre>
                    </Paragraph>
                  );
                })}
              </div>
            ))}
          </Col>
        }
      </Row>
    </>
  );
}

export default index