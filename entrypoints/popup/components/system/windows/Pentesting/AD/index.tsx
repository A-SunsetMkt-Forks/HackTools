import React, { useState, useEffect } from 'react'
import { Select, Input, Row, Col, Radio, Typography } from "antd";
import { FaLinux, FaWindows } from "react-icons/fa";
import data from '@assets/data/Windows/AD/Enumeration.ad.json'; // adjust the path to your JSON file

const { Option, OptGroup } = Select;
const { Paragraph, Text } = Typography;

const index = () => {
  const [mode, setMode] = useState("linux");
  const [tasks, setTasks] = useState([]);
  const [selectedCommand, setSelectedCommand] = useState(null);

  useEffect(() => {
    setTasks(data);
  }, [mode,tasks]);
  
  const handleModeChange = (evt) => {
    const newMode = evt.target.value;
    setMode(newMode);
    // FIXME: switching OS dont switch the UI + Command
    
    // Find the command with the same description in the other mode
    const sameCommandInNewMode = tasks.flatMap(task => task[newMode] || []).find(option => option.description === selectedCommand?.description);
    
    // If the command exists in the other mode, set it as the selectedCommand
    console.log(sameCommandInNewMode)
    setSelectedCommand(sameCommandInNewMode || null);
  };

  const handleCommandChange = (value, option) => {
    setSelectedCommand(option);
  };

  return (
    <>
      <Row gutter={[16, 16]}>
        <Col span={8}>
          <Radio.Group defaultValue={mode} buttonStyle="solid" onChange={handleModeChange}>
            <Radio.Button value="windows"><FaWindows /> Windows</Radio.Button>
            <Radio.Button value="linux"><FaLinux /> Linux</Radio.Button>
          </Radio.Group>
        </Col>
        <Col span={16} >
          <Select
            showSearch
            style={{ width: "100%" }}
            placeholder="Steps"
            optionFilterProp="children"
            onChange={handleCommandChange}
            filterOption={(input, option) =>
              typeof option.children === 'string' && option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
            }
          >

            {tasks.map((task) => {
              const taskCommands = task[mode];
              if (taskCommands && Array.isArray(taskCommands)) {
                return (
                  <OptGroup label={task.task} key={task.id}>
                    {taskCommands.map((option) => (
                      <Option key={option.id} value={option.command}>
                        {option.description}
                      </Option>
                    ))}
                  </OptGroup>
                );
              }
              return null;
            })}

          </Select>
        </Col>

        {selectedCommand &&
          <Col>
            <Paragraph>{selectedCommand.children}</Paragraph>
            <Text code>{selectedCommand.value}</Text>
          </Col>
        }
      </Row>
    </>
  )
}

export default index