import { create } from "zustand";
import { persist } from "zustand/middleware";
import { storage } from "@components/createPersistedState";



export interface Credential {
    type: 'nthash' | 'password' | 'tgt' | 'st' | 'certificate';
    value: string;
  }

export interface Principal {
    name: string;
    credentials: Credential[];
    description: string;
  }


export interface CommandGroup {
    commandList: string[];
    commandGroupDescription: string;
}
export interface Command {
    commandId: string;
    commandTitle: string;
    commandDescription: string;
    linuxCommands: CommandGroup[];
    windowsCommands: CommandGroup[];
}

export interface Task {
    topicId: number;
    topicTitle: string;
    topicDescription: string;
    commands: Command[];
}
interface Store {
    operatingSystemMode: string;
    taskList: Task[];
    selectedTaskCommand: Command | null;
    setOperatingSystemMode: (mode: string) => void;
    setTaskList: (tasks: Task[]) => void;
    setSelectedTaskCommand: (command: Command) => void;
    metavariables: { [key: string]: string };
    setMetavariables: (newMetavariables: { [key: string]: string }) => void;
    principals: Principal[];
  selectedPrincipal: Principal | null;
  addPrincipal: (principal: Principal) => void;
  selectPrincipal: (principal: Principal) => void;
  credentialType: string;
  setCredentialType: (type: string) => void;
}

export const useStore = create<Store>(
    // @ts-ignore
    persist(
        (set, get) => ({
            operatingSystemMode: 'linux',
            taskList: [],
            selectedTaskCommand: null,
            metavariables: {},
            setMetavariables: (newMetavariables) => set((state) => ({ metavariables: { ...state.metavariables, ...newMetavariables } })),
            setOperatingSystemMode: (mode) => set({ operatingSystemMode: mode }),
            setTaskList: (tasks) => set({ taskList: tasks }),
            setSelectedTaskCommand: (command) => set({ selectedTaskCommand: command }),
            principals: [],
            selectedPrincipal: null,
            addPrincipal: (principal) => set((state) => ({ principals: [...state.principals, principal] })),
            selectPrincipal: (principal) => set({ selectedPrincipal: principal }),
            credentialType: null,
            setCredentialType: (type: string) => set({ credentialType: type }),
        }),
        {
            name: 'pentesting-ad-store',
            getStorage: () => storage,
        }
    )
);

export default useStore;