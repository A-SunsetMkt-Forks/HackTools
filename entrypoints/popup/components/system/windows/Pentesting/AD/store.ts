import { storage } from "@components/createPersistedState";
import { create } from "zustand";
import { persist } from "zustand/middleware";

export interface Credential {
	type: "nthash" | "password" | "tgt" | "certificate" | "netntlm" | "notes";
	value: string;
}

export interface Principal {
	name: string;
	credentials: Credential[];
	description: string;
}

export interface CommandGroup {
	commandList: string[];
	commandGroupDescription: string;
}
export interface Command {
	commandId: string;
	commandTitle: string;
	commandDescription: string;
	linuxCommands: CommandGroup[];
	windowsCommands: CommandGroup[];
}

export interface Task {
	topicId: number;
	topicTitle: string;
	topicDescription: string;
	commands: Command[];
}
interface Store {
	operatingSystemMode: string;
	taskList: Task[];
	selectedTaskCommand: Command | null;
	setOperatingSystemMode: (mode: string) => void;
	setTaskList: (tasks: Task[]) => void;
	setSelectedTaskCommand: (command: Command) => void;
	metavariables: { [key: string]: string };
	setMetavariables: (newMetavariables: { [key: string]: string }) => void;
	principals: Principal[];
	selectedPrincipal: Principal | null;
	addPrincipal: (principal: Principal) => void;
	selectPrincipal: (principal: Principal) => void;
	credentialType: string;
	setCredentialType: (type: string) => void;
	deletePrincipal: (name: string) => void;
	resetAll: () => void;
	addCredential: (credential: Credential) => void;
	isModalVisible: boolean;
	setIsModalVisible: (visible: boolean) => void;
	lastSelectedPrincipalName: string | null;
	setLastSelectedPrincipalName: (name: string | null) => void;
	isTemplateMode: boolean;
	setIsTemplateMode: (mode: boolean) => void;
}

export const useStore = create<Store>(
	// @ts-ignore
	persist(
		(set, get) => ({
			operatingSystemMode: "linux",
			taskList: [],
			selectedTaskCommand: null,
			metavariables: {},
			setMetavariables: (newMetavariables) =>
				set((state) => ({
					metavariables: { ...state.metavariables, ...newMetavariables },
				})),
			setOperatingSystemMode: (mode) => set({ operatingSystemMode: mode }),
			setTaskList: (tasks) => set({ taskList: tasks }),
			setSelectedTaskCommand: (command) =>
				set({ selectedTaskCommand: command }),
			principals: [],
			selectedPrincipal: null,
			addPrincipal: (principal) =>
				set((state) => {
					const existingPrincipalIndex = state.principals.findIndex(
						(p) => p.name === principal.name
					);
					if (existingPrincipalIndex !== -1) {
						// If a principal with the same name already exists, update its credentials
						const updatedPrincipals = [...state.principals];
						updatedPrincipals[existingPrincipalIndex].credentials =
							principal.credentials;
						return { principals: updatedPrincipals };
					} else {
						// If a principal with the same name doesn't exist, add a new principal
						return { principals: [...state.principals, principal] };
					}
				}),
			selectPrincipal: (principal) => set({ selectedPrincipal: principal }),
			deletePrincipal: (name: string) =>
				set((state) => ({
					principals: state.principals.filter(
						(principal) => principal.name !== name
					),
				})),
			resetAll: () => set({ principals: [] }),
			isModalVisible: false,
			setIsModalVisible: (visible: boolean) => set({ isModalVisible: visible }),
			credentialType: "nthash", // Set the initial value of credentialType to 'nthash'
			setCredentialType: (type: string) => set({ credentialType: type }),
			lastSelectedPrincipalName: null,
			setLastSelectedPrincipalName: (name) =>
				set({ lastSelectedPrincipalName: name }),
			addCredential: (credential: Credential) =>
				set((state) => {
					if (state.selectedPrincipal) {
						const updatedPrincipals = state.principals.map((principal) =>
							principal.name === state.selectedPrincipal.name
								? {
										...principal,
										credentials: principal.credentials.find(
											(c) => c.type === credential.type
										)
											? principal.credentials.map((c) =>
													c.type === credential.type ? credential : c
											  )
											: [...principal.credentials, credential],
								  }
								: principal
						);
						const updatedSelectedPrincipal = updatedPrincipals.find(
							(p) => p.name === state.selectedPrincipal.name
						);
						return {
							principals: updatedPrincipals,
							selectedPrincipal: updatedSelectedPrincipal,
						};
					}
				}),
			isTemplateMode: false,
			setIsTemplateMode: (mode) => set({ isTemplateMode: mode }),
		}),
		{
			name: "pentesting-ad-store",
			getStorage: () => storage,
		}
	)
);

export default useStore;
