import React from 'react'
import { Modal, Input, Button, Row, Col, Radio, Typography, Select, Form, Divider } from 'antd';
import { PlusCircleOutlined, UserOutlined, DesktopOutlined, KeyOutlined, DeleteOutlined } from '@ant-design/icons';
import { FaLinux, FaWindows, FaHashtag, FaKey, FaTicketAlt, FaCertificate, FaCheckCircle } from "react-icons/fa";
import { useStore } from './store';

const MetavariablesModal = () => {
  const { Option, OptGroup } = Select;
  const { Paragraph, Text } = Typography;
  const [form] = Form.useForm();

  const { operatingSystemMode, taskList, selectedTaskCommand, setOperatingSystemMode, setTaskList, setSelectedTaskCommand, addPrincipal, selectPrincipal, selectedPrincipal, principals, credentialType, setCredentialType, deletePrincipal, addCredential, isModalVisible, setIsModalVisible, metavariables, setMetavariables } = useStore();

  const handleAddPrincipal = () => {
    form.validateFields().then((values) => {
      const newPrincipal = {
        name: values.name,
        credentials: [
          {
            type: values.credentialType,
            value: values.credentialValue,
          },
        ],
        description: values.description,
      };
      addPrincipal(newPrincipal);
      form.resetFields();
    });
  };

  const handleOk = () => {
    setIsModalVisible(false);
  };

  const handleCancel = () => {
    setIsModalVisible(false);
  };

  const handleInputChange = (e) => {
    const trimmedValue = e.target.value.trim();
    setMetavariables({ [e.target.name]: trimmedValue === "" ? "" : trimmedValue });
  };
  const handleCredentialTypeChange = (e) => {
    setCredentialType(String(e.target.value));
  };

  const handleAddCredential = () => {
    form.validateFields().then((values) => {
      const newCredential = {
        type: values.credentialType,
        value: values.credentialValue,
      };
      addCredential(newCredential);
      form.resetFields();
    });
  };

  return (
    
      <Modal title="Set Metavariables" open={isModalVisible} onOk={handleOk} onCancel={handleCancel} width={720}>
        <Row gutter={16}>
          <Col span={8}>
            <Input name="INTERFACE" placeholder="INTERFACE" value={metavariables.INTERFACE} onChange={handleInputChange} />
          </Col>
          <Col span={8}>
            <Input name="DC_IP" placeholder="DC_IP" value={metavariables.DC_IP} onChange={handleInputChange} />
          </Col>
          <Col span={8}>
            <Input name="DOMAIN" placeholder="DOMAIN" value={metavariables.DOMAIN} onChange={handleInputChange} />
          </Col>
        </Row>

        <Divider />

        <Form form={form} layout="vertical" onFinish={handleAddPrincipal}>
          <Form.Item name="name" rules={[{ required: true, message: 'Please input the principal name!' }]}>
            <Input placeholder="JohnDoe" />
          </Form.Item>
          <Form.Item name="credentialType">
            <Radio.Group value={credentialType} onChange={handleCredentialTypeChange}>
              <Radio.Button value="nthash"><FaHashtag /> NT HASH</Radio.Button>
              <Radio.Button value="password"><FaKey /> Password</Radio.Button>
              <Radio.Button value="tgt"><FaTicketAlt /> TGT</Radio.Button>
              <Radio.Button value="st"><FaTicketAlt /> ST</Radio.Button>
              <Radio.Button value="certificate"><FaCertificate /> Certificate</Radio.Button>
            </Radio.Group>
          </Form.Item>
          {credentialType && (
            <Form.Item name="credentialValue" rules={[{ required: true, message: 'Please input the credential value!' }]}>
              <Input.TextArea
                // placeholder={credentialType.toUpperCase()}
                style={{ width: '100%', height: '100px' }}
                value={selectedPrincipal && selectedPrincipal.credentials[0] && selectedPrincipal.credentials[0].value}
              />
            </Form.Item>
          )}
          <Form.Item>
            <Button type="primary" htmlType="submit">Add Principal</Button>
          </Form.Item>
        </Form>

        <Divider />

        <Select
          style={{ width: '100%' }}
          showSearch
          value={selectedPrincipal?.name}
          onChange={(name) => {
            const selectedPrincipal = principals.find((p) => p.name === name);
            selectPrincipal(selectedPrincipal);
            form.setFieldsValue({
              name: selectedPrincipal.name,
              credentialType: selectedPrincipal.credentials[0].type,
              credentialValue: selectedPrincipal.credentials[0].value,
            });
          }}
        >
          {principals.map((principal) => (
            <Option value={principal.name} key={principal.name}>
              {principal.name.endsWith('$') && <DesktopOutlined />}
              {!principal.name.endsWith('$') && <UserOutlined />}
              {principal.name}
              {principal && principal.credentials && principal.credentials.map((cred, id) => {
                if (cred.type === 'nthash') return <FaHashtag />;
                if (cred.type === 'password') return <FaKey />;
                if (cred.type === 'tgt' || cred.type === 'st') return <FaTicketAlt />;
                if (cred.type === 'certificate') return <FaCertificate />;
                return null;
              })}
              <DeleteOutlined onClick={() => deletePrincipal(principal.name)} />
            </Option>
          ))}
        </Select>
      
    </Modal>
  );
}

export default MetavariablesModal;