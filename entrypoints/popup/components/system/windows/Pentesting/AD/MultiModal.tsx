import { useEffect } from 'react';
import { Drawer } from 'antd';
import { DeleteOutlined } from '@ant-design/icons';
import { Button, Col, Divider, Form, Input, Modal, Row, Select, Tabs, Typography } from 'antd';
import { FaCertificate, FaHashtag, FaKey, FaTicketAlt } from "react-icons/fa";
import { useStore } from './store';

const MetavariablesModal = () => {


  const { TabPane } = Tabs;
  const { Option, OptGroup } = Select;
  const { Paragraph, Text } = Typography;
  const [form] = Form.useForm();

  const { addPrincipal, selectPrincipal, selectedPrincipal, principals, credentialType, setCredentialType, deletePrincipal, addCredential, isModalVisible, setIsModalVisible, metavariables, setMetavariables, setLastSelectedPrincipalName, lastSelectedPrincipalName } = useStore();


  const handleAddPrincipal = () => {
    form.validateFields().then((values) => {
      const newPrincipal = {
        name: values.name,
        credentials: [
          {
            type: 'nthash',
            value: values.nthashValue,
          },
          {
            type: 'password',
            value: values.passwordValue,
          },
          {
            type: 'tgt',
            value: values.tgtValue,
          },
          {
            type: 'st',
            value: values.stValue,
          },
          {
            type: 'certificate',
            value: values.certificateValue,
          },
        ].filter(credential => credential.value != null),
        description: values.description,
      };
      // @ts-ignore
      addPrincipal(newPrincipal);

    });
  };

  const handleSelectPrincipal = (name) => {
    const selectedPrincipal = principals.find((p) => p.name === name);
    selectPrincipal(selectedPrincipal);
    setLastSelectedPrincipalName(name);
    if (selectedPrincipal) {
      form.setFieldsValue({
        name: selectedPrincipal.name,
        nthashValue: selectedPrincipal.credentials.find(c => c.type === 'nthash')?.value,
        passwordValue: selectedPrincipal.credentials.find(c => c.type === 'password')?.value,
        tgtValue: selectedPrincipal.credentials.find(c => c.type === 'tgt')?.value,
        stValue: selectedPrincipal.credentials.find(c => c.type === 'st')?.value,
        certificateValue: selectedPrincipal.credentials.find(c => c.type === 'certificate')?.value,
      });
    } else {
      form.resetFields();
    }
  };



  const handleOk = () => {
    setIsModalVisible(false);
  };

  const handleCancel = () => {
    setIsModalVisible(false);
  };

  const handleInputChange = (e) => {
    const trimmedValue = e.target.value.trim();
    setMetavariables({ [e.target.name]: trimmedValue === "" ? "" : trimmedValue });
  };
  const handleCredentialTypeChange = (key) => {
    setCredentialType(String(key));
  };




  useEffect(() => {
    if (principals.length > 0) {
      let selectedPrincipal;
      if (lastSelectedPrincipalName) {
        selectedPrincipal = principals.find((p) => p.name === lastSelectedPrincipalName);
      }
      if (!selectedPrincipal) {
        selectedPrincipal = principals[0];
      }
      selectPrincipal(selectedPrincipal);
      form.setFieldsValue({
        nthashValue: selectedPrincipal.credentials.find(c => c.type === 'nthash')?.value,
        passwordValue: selectedPrincipal.credentials.find(c => c.type === 'password')?.value,
        tgtValue: selectedPrincipal.credentials.find(c => c.type === 'tgt')?.value,
        stValue: selectedPrincipal.credentials.find(c => c.type === 'st')?.value,
        certificateValue: selectedPrincipal.credentials.find(c => c.type === 'certificate')?.value,
      });
    } else {
      form.resetFields();
      selectPrincipal(null);
    }
  }, [principals, form, selectPrincipal, lastSelectedPrincipalName]);



  return (
    <Drawer
    title="Set Metavariables"
    visible={isModalVisible}
    onClose={handleCancel}
    width={720}
  >
      <Row gutter={16}>
        <Col span={8}>
          <Input name="INTERFACE" placeholder="INTERFACE" value={metavariables.INTERFACE} onChange={handleInputChange} />
        </Col>
        <Col span={8}>
          <Input name="DC_IP" placeholder="DC_IP" value={metavariables.DC_IP} onChange={handleInputChange} />
        </Col>
        <Col span={8}>
          <Input name="DOMAIN" placeholder="DOMAIN" value={metavariables.DOMAIN} onChange={handleInputChange} />
        </Col>
      </Row>

      <Divider />

      <Form form={form} layout="vertical" onFinish={handleAddPrincipal}>
        <Form.Item name="name" rules={[{ required: true, message: 'Please input the principal name!' }]}>
          <Input placeholder="JohnDoe" value={selectedPrincipal?.name || ''} />
        </Form.Item>


        <Form.Item name="credentialType">
          <Tabs defaultActiveKey="nthash" onChange={handleCredentialTypeChange}>
            <TabPane tab={<><FaHashtag /> NT HASH</>} key="nthash" />
            <TabPane tab={<><FaKey /> Password</>} key="password" />
            <TabPane tab={<><FaTicketAlt /> TGT</>} key="tgt" />
            <TabPane tab={<><FaTicketAlt /> ST</>} key="st" />
            <TabPane tab={<><FaCertificate /> Certificate</>} key="certificate" />
          </Tabs>
        </Form.Item>
        {credentialType === 'nthash' && (
          <Form.Item name="nthashValue">
            <Input.TextArea
              style={{ width: '100%', height: '100px' }}
              value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'nthash')?.value}
              onChange={(e) => {
                if (selectedPrincipal) {
                  addCredential({ type: 'nthash', value: e.target.value });
                }
              }}
            />
          </Form.Item>
        )}
        {credentialType === 'password' && (
          <Form.Item name="passwordValue">
            <Input.TextArea
              style={{ width: '100%', height: '100px' }}
              value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'password')?.value}
              onChange={(e) => {
                if (selectedPrincipal) {
                  addCredential({ type: 'password', value: e.target.value });
                }
              }}
            />
          </Form.Item>
        )}
        {credentialType === 'tgt' && (
          <Form.Item name="tgtValue">
            <Input.TextArea
              style={{ width: '100%', height: '100px' }}
              value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'tgt')?.value}
              onChange={(e) => {
                if (selectedPrincipal) {
                  addCredential({ type: 'tgt', value: e.target.value });
                }
              }}
            />
          </Form.Item>
        )}
        {credentialType === 'st' && (
          <Form.Item name="stValue">
            <Input.TextArea
              style={{ width: '100%', height: '100px' }}
              value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'st')?.value}
              onChange={(e) => {
                if (selectedPrincipal) {
                  addCredential({ type: 'st', value: e.target.value });
                }
              }}
            />
          </Form.Item>
        )}




        <Form.Item>
          <Button type="primary" htmlType="submit">Add Principal</Button>
        </Form.Item>
      </Form>

      <Divider />

      <Select
        style={{ width: '100%' }}
        showSearch
        value={selectedPrincipal?.name}
        onChange={handleSelectPrincipal}
      >
        {principals.map((principal) => (
          <Option key={principal.name} value={principal.name}>
            {principal.name}
            <Button
              type="text"
              danger
              onClick={(e) => {
                e.stopPropagation();
                deletePrincipal(principal.name);
              }}
            >
              <DeleteOutlined />
            </Button>
          </Option>
        ))}
      </Select>

      <Divider />
      </Drawer>
  );
};

export default MetavariablesModal;