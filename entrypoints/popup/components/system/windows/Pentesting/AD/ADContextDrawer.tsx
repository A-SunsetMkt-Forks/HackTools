import { Badge, Button, Col, Divider, Drawer, Form, Input, Row, Select, Tabs, Typography, message, Switch } from 'antd';
import { useEffect, useState } from 'react';
import { FaCertificate, FaDesktop, FaEdit, FaHandshake, FaHashtag, FaKey, FaPlus, FaRegStickyNote, FaTicketAlt, FaUser } from "react-icons/fa";
import { useStore } from './store';


const MetavariablesModal = () => {


  const { TabPane } = Tabs;
  const [isUPN, setIsUPN] = useState(true);
  const [isComputer, setIsComputer] = useState(false);
  const { Option, OptGroup } = Select;
  const { Paragraph, Text } = Typography;
  const [form] = Form.useForm();
  const [mode, setMode] = useState('add');
  const [formValues, setFormValues] = useState({});
  const { addPrincipal, selectPrincipal, selectedPrincipal, principals, credentialType, setCredentialType, deletePrincipal, addCredential, isModalVisible, setIsModalVisible, metavariables, setMetavariables, setLastSelectedPrincipalName, lastSelectedPrincipalName, isTemplateMode, setIsTemplateMode } = useStore();


  const handleAddPrincipal = () => {
    form.validateFields().then((values) => {
      console.log(values)
      const newPrincipal = {
        name: values.name,
        credentials: [
          {
            type: 'nthash',
            value: values.nthashValue,
          },
          {
            type: 'password',
            value: values.passwordValue,
          },
          {
            type: 'tgt',
            value: values.tgtValue,
          },
          {
            type: 'netntlm',
            value: values.stValue,
          },
          {
            type: 'certificate',
            value: values.certificateValue,
          },
          {
            type: 'notes',
            value: values.notesValue,
          },
        ].filter(credential => credential.value != null),
        description: values.description,
      };
      // @ts-ignore
      addPrincipal(newPrincipal);
      setFormValues({
        name: "",
        nthashValue: "",
        passwordValue: "",
        tgtValue: "",
        stValue: "",
        certificateValue: "",
        notesValue: "",
      }); // Clear the form values
      message.success(`Principal ${values.name} was added successfully.`);
    });
  };

  const handleSelectPrincipal = (name) => {
    const selectedPrincipal = principals.find((p) => p.name === name);
    selectPrincipal(selectedPrincipal);
    setLastSelectedPrincipalName(name);
    if (selectedPrincipal) {
      setFormValues({
        name: selectedPrincipal.name,
        nthashValue: selectedPrincipal.credentials.find(
          (c) => c.type === "nthash"
        )?.value,
        passwordValue: selectedPrincipal.credentials.find(
          (c) => c.type === "password"
        )?.value,
        tgtValue: selectedPrincipal.credentials.find((c) => c.type === "tgt")
          ?.value,
        stValue: selectedPrincipal.credentials.find((c) => c.type === "st")
          ?.value,
        certificateValue: selectedPrincipal.credentials.find(
          (c) => c.type === "certificate"
        )?.value,
      });
    } else {
      setFormValues({
        name: "",
        nthashValue: "",
        passwordValue: "",
        tgtValue: "",
        stValue: "",
        certificateValue: "",
      });
    }
  };

  const handleOk = () => {
    setIsModalVisible(false);
  };

  const handleCancel = () => {
    setIsModalVisible(false);
  };

  const handleInputChange = (e) => {
    const inputValue = e.target.value;
    const trimmedValue = inputValue.trim();

    setFormValues({
      ...formValues,
      [e.target.name]: e.target.value,
    });

    setIsUPN(inputValue.includes('@'));
    setIsComputer(inputValue.includes('$@'));
    setMetavariables({ [e.target.name]: trimmedValue === "" ? "" : trimmedValue });
  };


  const handleCredentialTypeChange = (key) => {
    setCredentialType(String(key));
  };

  const [isSecondDrawerVisible, setIsSecondDrawerVisible] = useState(false);

  const closeSecondDrawer = () => {
    setIsSecondDrawerVisible(false);
  };
  const showSecondDrawer = () => {
    setMode('edit');
    setIsSecondDrawerVisible(true);
  };

  const showSecondDrawerEmpty = () => {
    form.resetFields(); // Reset the form
    selectPrincipal(null); // Clear the selectedPrincipal state
    setCredentialType('nthash'); // Set the credentialType to 'nthash'
    setMode('add');
    setIsSecondDrawerVisible(true);
  };

  useEffect(() => {
    if (principals.length > 0) {
      let selectedPrincipal;
      if (lastSelectedPrincipalName) {
        selectedPrincipal = principals.find((p) => p.name === lastSelectedPrincipalName);
      }
      if (!selectedPrincipal) {
        selectedPrincipal = principals[0];
      }
      selectPrincipal(selectedPrincipal);
      form.setFieldsValue({
        name: selectedPrincipal.name,
        nthashValue: selectedPrincipal.credentials.find(c => c.type === 'nthash')?.value,
        passwordValue: selectedPrincipal.credentials.find(c => c.type === 'password')?.value,
        tgtValue: selectedPrincipal.credentials.find(c => c.type === 'tgt')?.value,
        stValue: selectedPrincipal.credentials.find(c => c.type === 'netntlm')?.value,
        certificateValue: selectedPrincipal.credentials.find(c => c.type === 'certificate')?.value,
        notesValue: selectedPrincipal.credentials.find(c => c.type === 'notes')?.value,
      });
    } else {
      form.resetFields();
      selectPrincipal(null);
    }
  }, [principals, form, selectPrincipal, lastSelectedPrincipalName]);


  const handleDeletePrincipal = () => {
    if (selectedPrincipal) {
      deletePrincipal(selectedPrincipal.name);
      setIsSecondDrawerVisible(false); // Close the drawer
    }
  };


  return (
    <Drawer
      title="Context Settings"
      open={isModalVisible}
      onClose={handleCancel}
      width={900}
    >
      <Row gutter={[16, 16]}>
        <Col span={24}>
          <Typography.Paragraph>
            This panel sets the context by defining the environment and current user details. It dynamically adjusts command syntax for several tools based on these settings.
          </Typography.Paragraph>
        </Col>
        <Col span={24}>
          <Form.Item label="Templatise commands">
            <Switch checked={isTemplateMode} onChange={setIsTemplateMode} />
          </Form.Item>
        </Col>
      </Row>
      <Row gutter={[16, 16]}>
        <Col span={24}>
          <Typography.Title level={4}>Attacker Config</Typography.Title>
        </Col>
        <Col span={8}>
          <Form.Item label="Network Interface">
            <Input name="INTERFACE" placeholder="Network interface" value={metavariables.INTERFACE} onChange={handleInputChange} />
          </Form.Item>
        </Col>
        <Col span={8}>
          <Form.Item label="Wordlist path">
            <Input name="WORDLIST" placeholder="Wordlist" value={metavariables.WORDLIST} onChange={handleInputChange} />
          </Form.Item>
        </Col>
      </Row>

      <Row gutter={[16, 16]}>
        <Col span={24}>
          <Typography.Title level={4}>General Domain Config</Typography.Title>
        </Col>
        <Col span={8}>
          <Form.Item label="Domain FQDN">
            <Input name="DOMAIN" placeholder="Domain FQDN (corp.local)" value={metavariables.DOMAIN} onChange={handleInputChange} />
          </Form.Item>
        </Col>
        <Col span={8}>
          <Form.Item label="DC Netbios Name">
            <Input name="DC_NETBIOS_NAME" placeholder="DC netbios name (srvdc01)" value={metavariables.DC_NETBIOS_NAME} onChange={handleInputChange} />
          </Form.Item>
        </Col>
        <Col span={8}>
          <Form.Item label="Domain Controller IPv4">
            <Input name="DC_IP" placeholder="Domain controller IPv4" value={metavariables.DC_IP} onChange={handleInputChange} />
          </Form.Item>
        </Col>
      </Row>
      <Divider />
      <Row gutter={[16,16]}>
      <Col span={24}>
          <Typography.Title level={4}>Accounts</Typography.Title>
        </Col>
        <Col span={18}>
          <Select
            style={{ width: '100%' }}
            showSearch
            value={selectedPrincipal?.name}
            onChange={handleSelectPrincipal}
          >
            {principals.map((principal) => (
              <Option key={principal.name} value={principal.name}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
                  <div style={{ display: 'flex', alignItems: 'center' }}>
                    {principal.name.includes('$@') ? <FaDesktop style={{ marginRight: '4px' }} /> : <FaUser style={{ marginRight: '4px' }} />}
                    <span>{principal.name}</span>
                  </div>
                  <div>
                    {principal.credentials.find(c => c.type === 'nthash') && <FaHashtag style={{ marginRight: '4px', fontSize: '0.8em' }} />}
                    {principal.credentials.find(c => c.type === 'password') && <FaKey style={{ marginRight: '4px', fontSize: '0.8em' }} />}
                    {principal.credentials.find(c => c.type === 'tgt') && <FaTicketAlt style={{ marginRight: '4px', fontSize: '0.8em' }} />}
                    {principal.credentials.find(c => c.type === 'netntlm') && <FaHandshake style={{ marginRight: '4px', fontSize: '0.8em' }} />}
                    {principal.credentials.find(c => c.type === 'certificate') && <FaCertificate style={{ marginRight: '4px', fontSize: '0.8em' }} />}
                    {principal.credentials.find(c => c.type === 'notes') && <FaRegStickyNote style={{ marginRight: '4px', fontSize: '0.8em' }} />}
                  </div>
                </div>
              </Option>
            ))}
          </Select>

        </Col>
        <Col span={6}>
          <Button.Group>
            <Button icon={<FaEdit />} onClick={showSecondDrawer}>Edit</Button>
            <Button type="primary" icon={<FaPlus />} onClick={showSecondDrawerEmpty}>Add</Button>
          </Button.Group>
        </Col>
      </Row>

      <Drawer
        title="Second Level Drawer"
        open={isSecondDrawerVisible}
        onClose={closeSecondDrawer}
        width={720}
      >

        <Form form={form} layout="vertical" onFinish={handleAddPrincipal}>
          <Form.Item
            name="name"
            help={!isUPN && 'The name is not in UPN format.'}
            validateStatus={!isUPN ? 'error' : ''}
          >
            <Input placeholder="JohnDoe" value={formValues.name || ""}
              onChange={handleInputChange}
              prefix={isComputer ? <FaDesktop /> : <FaUser />}
            />
          </Form.Item>


          <Form.Item name="credentialType">
            <Tabs defaultActiveKey="nthash" onChange={handleCredentialTypeChange}>

              <TabPane tab={<Badge dot={Boolean(selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'nthash')?.value)} ><div style={{ display: 'flex', alignItems: 'center' }}><FaHashtag /> NT HASH</div></Badge>} key="nthash" />
              <TabPane tab={<Badge dot={Boolean(selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'password')?.value)} ><div style={{ display: 'flex', alignItems: 'center' }}><FaKey /> Password</div></Badge>} key="password" />
              <TabPane tab={<Badge dot={Boolean(selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'tgt')?.value)} ><div style={{ display: 'flex', alignItems: 'center' }}><FaTicketAlt /> TGT</div></Badge>} key="tgt" />
              <TabPane tab={<Badge dot={Boolean(selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'certificate')?.value)} ><div style={{ display: 'flex', alignItems: 'center' }}><FaCertificate /> Certificate</div></Badge>} key="certificate" />
              <TabPane tab={<Badge dot={Boolean(selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'netntlm')?.value)} ><div style={{ display: 'flex', alignItems: 'center' }}><FaHandshake /> NetNTLM</div></Badge>} key="netntlm" />
              <TabPane tab={<Badge dot={Boolean(selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'notes')?.value)} ><div style={{ display: 'flex', alignItems: 'center' }}><FaHandshake /> Notes</div></Badge>} key="notes" />
            </Tabs>
          </Form.Item>
          {credentialType === 'nthash' && (
            <Form.Item name="nthashValue">
              <Input.TextArea
                style={{ width: '100%', height: '100px' }}
                value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'nthash')?.value}
                onChange={(e) => {
                  if (selectedPrincipal) {
                    addCredential({ type: 'nthash', value: e.target.value });
                  }
                  setFormValues({
                    ...formValues,
                    nthashValue: e.target.value,
                  });
                }}
              />
            </Form.Item>
          )}
          {credentialType === 'password' && (
            <Form.Item name="passwordValue">
              <Input.TextArea
                style={{ width: '100%', height: '100px' }}
                value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'password')?.value}
                onChange={(e) => {
                  if (selectedPrincipal) {
                    addCredential({ type: 'password', value: e.target.value });
                  }
                  setFormValues({
                    ...formValues,
                    passwordValue: e.target.value,
                  });
                }}
              />
            </Form.Item>
          )}
          {credentialType === 'tgt' && (
            <Form.Item name="tgtValue">
              <Input.TextArea
                style={{ width: '100%', height: '100px' }}
                value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'tgt')?.value}
                onChange={(e) => {
                  if (selectedPrincipal) {
                    addCredential({ type: 'tgt', value: e.target.value });
                  }
                  setFormValues({
                    ...formValues,
                    tgtValue: e.target.value,
                  });
                }}
              />
            </Form.Item>
          )}
          {credentialType === 'netntlm' && (
            <Form.Item name="stValue">
              <Input.TextArea
                style={{ width: '100%', height: '100px' }}
                value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'netntlm')?.value}
                onChange={(e) => {
                  if (selectedPrincipal) {
                    addCredential({ type: 'netntlm', value: e.target.value });
                  }
                  setFormValues({
                    ...formValues,
                    stValue: e.target.value,
                  });
                }}
              />
            </Form.Item>
          )}
          {credentialType === 'certificate' && (
            <Form.Item name="certificateValue">
              <Input.TextArea
                style={{ width: '100%', height: '100px' }}
                value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'certificate')?.value}
                onChange={(e) => {
                  if (selectedPrincipal) {
                    addCredential({ type: 'certificate', value: e.target.value });
                  }
                  setFormValues({
                    ...formValues,
                    certificateValue: e.target.value,
                  });
                }}
              />
            </Form.Item>
          )}
          {credentialType === 'notes' && (
            <Form.Item name="notesValue">
              <Input.TextArea
                style={{ width: '100%', height: '100px' }}
                value={selectedPrincipal && selectedPrincipal.credentials.find(c => c.type === 'notes')?.value}
                onChange={(e) => {
                  if (selectedPrincipal) {
                    addCredential({ type: 'notes', value: e.target.value });
                  }
                  setFormValues({
                    ...formValues,
                    notesValue: e.target.value,
                  });
                }}
              />
            </Form.Item>
          )}
          {mode === 'add' && (
            <Form.Item>
              <Button type="primary" htmlType="submit">Add Principal</Button>
            </Form.Item>
          )}
          {mode === 'edit' && (
            <Form.Item>
              <Button danger onClick={handleDeletePrincipal}>Delete</Button>
            </Form.Item>
          )}
        </Form>
        <Divider />
      </Drawer>
    </Drawer>
  );

}

export default MetavariablesModal;